tests:
- function_name: main
  description: >
    Orchestrates the execution of the other functions within the
    modules
  inputs_values:
  - scores: [1, 3, 5, 10, 15]
    ages: [1, 2, 3, 4, 5]
  - scores: [4, 5, 6, 5]
    ages: [2, 1, 2, 1]
  - scores: [1, 2, 3, 5]
    ages: [8, 9, 10, 1]
  expected_outputs:
  - total_score: 34
  - total_score: 15
  - total_score: 6
  assertions: has_values
- function_name: get_scores_by_ages
  description: > 
    Parses age and score data and returns a dictionary with keys
    being ages and values being a list of scores associated with
    each age
  inputs_values:
  - scores: [1, 3, 5, 10, 15]
    ages: [1, 2, 3, 4, 5]
  - scores: [4, 5, 6, 5]
    ages: [2, 1, 2, 1]
  - scores: [1, 2, 3, 5]
    ages: [8, 9, 10, 1]
  expected_outputs:
  - {1: [1], 2: [3], 3: [5], 4: [10], 5: [15]}
  - {2: [4, 6], 1: [5, 5]}
  - {8: [1], 9: [2], 10: [3], 1: [5]}
  assertions: equals
- function_name: get_succeeding_scores
  description: >
    Returns a list of all of the scores for ages that succeed the
    ith age in a sorted list of ages
  inputs_values:
  - i: 0
    ages: [1, 8, 9, 10]
    scores_by_ages: {8: [1], 9: [2], 10: [3], 1: [5]}
  - i: 1
    ages: [1, 10, 9, 8]
    scores_by_ages: {8: [1], 9: [2], 10: [3], 1: [5]}
  - i: 2
    ages: [1, 10, 9, 8]
    scores_by_ages: {8: [1], 9: [2], 10: [3], 1: [5]}
  expected_outputs:
  - [2, 3, 5]
  - [3, 5]
  - [5]
  assertions: equals
- function_name: get_non_conflicting_scores
  description: > 
    Returns the scores associated with an age that do not conflict:
    - Scores that are less than scores for succeeding ages
    - Scores that are more than scores for succeeding ages, but whose confliction can be canceled out by another score for
      the same age. The other score is not tallied.
      For example, if a, b, c are conflicting scores such that
      a > b > c then only a would be nonconflicting
  inputs_values:
  - scores: [1, 2]
    non_conflicting_scores: [1]
    succeeding_scores: [3, 4, 5]
  - scores: [5, 4, 3]
    non_conflicting_scores: [1, 2]
    succeeding_scores: [3, 4, 5]
  - scores: [5, 4, 3, 1]
    non_conflicting_scores: [1, 2, 3]
    succeeding_scores: [3, 4, 5]
  expected_outputs:
  - [1, 1, 2]
  - [1, 2, 5]
  - [1, 2, 3, 4, 4]
  assertions: equals
- function_name: get_total_score
  description: Returns the sum of nonconflicting player scores
  inputs_values:
  - {1: [1], 2: [3], 3: [5], 4: [10], 5: [15]}
  - {2: [4, 6], 1: [5, 5]}
  - {8: [1], 9: [2], 10: [3], 1: [5]}
  expected_outputs:
  - 34
  - 16
  - 6
  assertions: equals
