description: |
  # Count Inversions in an array | Set 1 (Using Merge Sort)
  Inversion Count for an array indicates - how far (or close) the array is from 
  being sorted. If the array is already sorted, then the inversion count is 0, 
  
  Formally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j]
  and i < j

  ## Example 1: 
  ```
  inputs: arr[] = [8, 4, 2, 1]
  outputs: 6
  Explanation: Given array has six inversions:
  - (8, 4)
  - (8, 2)
  - (8, 1)
  - (4, 2)
  - (4, 1)
  - (2, 1)
  (8, 4), (4, 2), (8, 2), (8, 1), (4, 1), (2, 1).
  ```

  # Example 2:
  ```
  inputs: arr[] = [3, 1, 2]
  outputs: 2
  Explanation: Given array has two inversions:
  (3, 1), (3, 2) 
  ```
resources:
- title:
  url: https://www.hackerrank.com/challenges/ctci-merge-sort/problem
functions:
  - name:  get_inversions
    description: Returns the inversions or positions that need to be swapped
      in order for the numbers in an array to be in ascending order
    inputs:
      - array: []
      - array: [1, 1]
      - array: [0, 1, 2, 3]
      - array: [8, 4, 2, 1]
      - array: [3, 1, 2]
    outputs:
      - []
      - []
      - []
      - [[0, 1], [1, 2], [0, 1], [2, 3], [1, 2], [0, 1]]
      - [[0, 1], [1, 2]]
  - name: main
    description: Returns the count of inversions needed to put the numbers in an
      array in ascending order
    cast_inputs_as: Data
    inputs:
    - array: []
    - array: [1, 1]
    - array: [0, 1, 2, 3]
    - array: [8, 4, 2, 1]
    - array: [3, 1, 2]
    outputs:
    - array: []
      count: 0
      inversions: []
    - array: [1, 1]
      count: 0
      inversions: []
    - array: [0, 1, 2, 3]
      count: 0
      inversions: []
    - array: [1, 2, 4, 8]
      count: 6
      inversions:
      - [0, 1]
      - [1, 2]
      - [0, 1]
      - [2, 3]
      - [1, 2]
      - [0, 1]
    - array: [1, 2, 3]
      count: 2
      inversions:
      - [0, 1]
      - [1, 2]
