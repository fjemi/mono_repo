environment:
  DEBUG: True
resources:
- title: Rotting Oranges
  url: https://leetcode.com/problems/rotting-oranges/
- function_name: main
  description: Orchestrates the execution of the other functions within the module
  inputs_values:
  - grid:
    - [2, 1, 1]
    - [1, 1, 0]
    - [0, 1, 1]
  - grid:
    - [2,1,1]
    - [0,1,1]
    - [1,0,1]
  - grid:
    - [0,2]
  expected_outputs:
  - - fresh_oranges: []
      minutes: 4
  - - fresh_oranges: ['2.0']
      minutes: -1
  - - fresh_oranges: []
      minutes: 0
  assertions: has_values
- function_name: get_adjacent_positions
  description: Returns a list of adjacent positions as string
  inputs_values:
  - i: 0
    j: 0
    grid_m: 0
    grid_n: 0
  - i: 0
    j: 0
    grid_m: 2
    grid_n: 2
  - i: 1
    j: 1
    grid_m: 2
    grid_n: 2
  - i: 1
    j: 1
    grid_m: 3
    grid_n: 3
  - i: 2
    j: 0
    grid_m: 3
    grid_n: 3
  expected_outputs:
  - []
  - ['1.0', '0.1']
  - ['1.0', '1.2', '0.1', '2.1']
  - ['2.1', '1.0', '3.0']
  assertions: equals
- function_name: get_position_states_and_adjacent_positions
  description: | 
    Adds the state and adjacent positions for each position in the grid to
    the fields 'states' and 'adjacent_positions' in the Data object. 
  inputs_values:
  - grid: 
    - []
  - grid:
    - [0, 1]
    - [2, 1]
  - grid:
    - [1]
  expected_outputs:
  - states: {}
    adjacent_positions: {}
  - states: 
      '0.0': [0]
      '0.1': [1]
      '1.0': [2]
      '1.1': [1]
    adjacent_positions:
      '0.0': ['0.1', '1.0']
      '0.1': ['0.0', '1.1']
      '1.0': ['0.0', '1.1']
      '1.1': ['0.1', '1.0']
  - states:
      '0.0': [1]
    adjacent_positions:
      '0.0': []
  assertions: has_values
- function_name: case_previous_state_is_zero_or_two
  description: Updates a position's states list by adding the last state to the list,
    and returns the modified position object
  inputs_values:
  - states: 
      '0.0': [1]
    adjacent_positions: []
    position: '0.0'
  - states: 
      '0.0': [0, 0]
    adjacent_positions: []
    position: '0.0'
  - states: 
      '1.1': [1, 1]
    adjacent_positions: []
    position: '1.1'
  expected_outputs:
  - '0.0': [1, 1]
  - '1.1': [0, 0, 0]
  - '2.2': [1, 1, 1]
  outputs_cast_as: dict
  assertions: equals
- function_name: case_previous_state_is_one
  description: Case when a positions current state is '1'. Check adjacent positions for rotton oranges and set the current state to '2' if they exist,
    otherwise set the current state to '1'.
  inputs_values:
  - states: 
      '0.0': [1]
      '0.1': [0]
      '1.0': [1]
    adjacent_positions: ['0.1', '1.0']
    position: '0.0'
  - states:
      '0.0': [1]
      '0.1': [2]
      '1.0': [1]
    adjacent_positions: ['0.1', '1.0']
    position: '0.0'
  - states:
      '1.1': [1]
      '1.2': [0]
      '1.0': [1]
      '2.1': [2]
      '0.1': [2]
    adjacent_positions: ['1.2', '2.1', '1.0', '0.1']
    position: '1.1'
  expected_outputs:
  - '0.0': [1, 1]
    '0.1': [2]
    '1.0': [1]
  - '0.0': [1, 2]
    '0.1': [2]
    '1.0': [1]
  - '1.1': [1, 2]
    '1.2': [0]
    '1.0': [1]
    '2.1': [2]
    '0.1': [2]
  outputs_cast_as: dict
  assertions: equals
- function_name: process_data
  description: Converts fresh oranges to rotton oranges. Updates the states
    of the positions, with each state representing a minute of time. 
  inputs_values:
  - adjacent_positions:
      '0.0':
      - '1.0'
      - '0.1'
      '0.1':
      - '1.1'
      - '0.2'
      - '0.0'
      '0.2':
      - '1.2'
      - '0.1'
      '1.0':
      - '2.0'
      - '0.0'
      - '1.1'
      '1.1':
      - '2.1'
      - '0.1'
      - '1.2'
      - '1.0'
      '1.2':
      - '2.2'
      - '0.2'
      - '1.1'
      '2.0':
      - '1.0'
      - '2.1'
      '2.1':
      - '1.1'
      - '2.2'
      - '2.0'
      '2.2':
      - '1.2'
      - '2.1'
    states:
      '0.0':
      - 2
      - 2
      - 2
      - 2
      - 2
      - 2
      '0.1':
      - 1
      - 2
      - 2
      - 2
      - 2
      - 2
      '0.2':
      - 1
      - 1
      - 2
      - 2
      - 2
      - 2
      '1.0':
      - 1
      - 2
      - 2
      - 2
      - 2
      - 2
      '1.1':
      - 1
      - 1
      - 2
      - 2
      - 2
      - 2
      '1.2':
      - 0
      - 0
      - 0
      - 0
      - 0
      - 0
      '2.0':
      - 0
      - 0
      - 0
      - 0
      - 0
      - 0
      '2.1':
      - 1
      - 1
      - 1
      - 2
      - 2
      - 2
      '2.2':
      - 1
      - 1
      - 1
      - 1
      - 2
      - 2
  - states:
      '0.0':
      - 2
      - 2
      - 2
      - 2
      - 2
      - 2
      '0.1':
      - 1
      - 2
      - 2
      - 2
      - 2
      - 2
      '0.2':
      - 1
      - 1
      - 2
      - 2
      - 2
      - 2
      '1.0':
      - 0
      - 0
      - 0
      - 0
      - 0
      - 0
      '1.1':
      - 1
      - 1
      - 2
      - 2
      - 2
      - 2
      '1.2':
      - 1
      - 1
      - 1
      - 2
      - 2
      - 2
      '2.0':
      - 1
      - 1
      - 1
      - 1
      - 1
      - 1
      '2.1':
      - 0
      - 0
      - 0
      - 0
      - 0
      - 0
      '2.2':
      - 1
      - 1
      - 1
      - 1
      - 2
      - 2
    adjacent_positions:
      '0.0':
      - '1.0'
      - '0.1'
      '0.1':
      - '1.1'
      - '0.2'
      - '0.0'
      '0.2':
      - '1.2'
      - '0.1'
      '1.0':
      - '2.0'
      - '0.0'
      - '1.1'
      '1.1':
      - '2.1'
      - '0.1'
      - '1.2'
      - '1.0'
      '1.2':
      - '2.2'
      - '0.2'
      - '1.1'
      '2.0':
      - '1.0'
      - '2.1'
      '2.1':
      - '1.1'
      - '2.2'
      - '2.0'
      '2.2':
      - '1.2'
      - '2.1'
  - adjacent_positions:
      '0.0':
      - '0.1'
      '0.1':
      - '0.0'
    states:
      '0.0':
      - 0
      - 0
      '0.1':
      - 2
      - 2
  inputs_cast_as: Data
  expected_outputs:
  - minutes: 4
    fresh_oranges: []
  - minutes: -1
    fresh_oranges: ['2.2']
  - minutes: 0
    fresh_oranges: []
  assertions: has_values
- function_name: post_processing
  description: Sets the 'minutes' field of the dataclass object to -1
    if there are remaining fresh oranges
  inputs_values:
  - fresh_oranges: []
    minutes: 1
  - fresh_oranges: [1]
    minutes: 1
  cast_as: Data
  expected_outputs:
  - minutes: 1
  - minutes: -1
  assertions: has_values
