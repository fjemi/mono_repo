paths: 
  '/{path}/':
    get:
      tags:
      - TODO
      - Utilities
      summary: Upload a File in Chunks
      description:
        $ref: '#/components/examples/{path}.description'
      parameters:
      - in: query
        name: compression_level
        type: number
        description: The level to deflate that is set as a pako option
        minimum: 1
        maximum: 9
        example: 7
      - in: query
        name: server_upload_limit_kb
        type: number
        description: The upload limit for the server in kilobytes (KB)
        example: 1024
      - in: query
        name: chunk_size_kb
        type: number
        description: The size in KB of chunks to split the deflated file into. Calculated on the backend if set to null.
        example: null
      - in: query
        name: max_headers_size_kb
        type: number
        description: The maximum size in KB of the headers for a request
        maximum: 20
        example: 16
      - in: query
        name: coefficient
        type: number
        description: Multiplied by the server upload limit to ensure the request is under the limit. Calculated on the backend if set to null.
        examples:
          'Null':
            value: null
          'Non-null':
            value: .95
      - in: query
        name: location
        type: string
        description: The location to save a file after it has been inflated.
        examples:
          'S3':
            value: S3
          'File System':
            value: 'file_system'
      - in: query
        name: read_as
        type: string
        description: The format to read a file in before deflating it
        examples:
          'Data URL':
            value: 'data_url'
          'Text':
            value: 'text'
      responses:
        200:
          description: Success
          content:
            'text/html':
              schema:
                type: string
                example: <html>Example HTML Response</html>
    post:
      tags:
      - TODO
      - Utilities
      summary: Upload a File in Chunks
      description:
        $ref: '#/components/examples/{path}.description'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              type: object
              required:
              - json
              - binary
              properties:
                json:
                  # required: true
                  type: string
                  description: | 
                    Attributes associated with the chunk of a deflated file. Represented as a JSON string. Includes:
                    - `file_name`
                    - `chunks_n`
                    - `chunk_i`
                    - `location`
                    - `read_as`
                  example: | 
                    {"file_name":"test.txt","chunks_n":1,"chunk_i":0,"location":"file_system","read_as":"text"}
                binary:
                  # required: true
                  type: string
                  format: binary
                  description: A chunk of a deflated file represented as a binary string.
                  example: |
                    b'------WebKitFormBoundaryf7TMp2yj1ZPOD2Rk\r\nContent-Disposition: form-data; name="binary"; filename="blob"\r\nContent-Type: application/octet-stream\r\n\r\nx\xda+I-.\xd1+\xa9(\x01\x00\x0e\xd9\x03O\r\n------WebKitFormBoundaryf7TMp2yj1ZPOD2Rk\r\nContent-Disposition: form-data; name="json"\r\n\r\n\r\n------WebKitFormBoundaryf7TMp2yj1ZPOD2Rk--\r\n'

      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  chunk:
                    type: number
                  file_name:
                    type: string
                  message:
                    type: string
              examples:
                'Chunk saved in presistant storage':
                  value:
                    chunk: 0
                    file_name: example.txt
                    message: Chunk saved in presistant storage
                'File saved to S3':
                  value:
                    file_name: example.txt
                    message: File saved to S3
            text/plain:
              schema:
                type: string
                data: string
              examples:
                'Mars': 
                  value: |
                    data: Hello Mars!

components:
  examples:
    '{path}.description': |
      Bypasses server upload limits by 
      1. Compressing deflating (compressing) a file
      2. Splitting the deflated file into chunks of a certain size in kilobytes (KB) less than the server upload limit
      3. Individually uploading each chunk to the server as a part of a multipart upload, and saving the chunks to the servers presistant storage
      4. Combining the chunks into the original deflated file onces all of the chunks have been recieved by the server
      5. Inflating (decompressing) the deflated file and saving it to a specified location
      
      The GET route serves an HTML template, and steps 1-3 are handled on the client side with JavaScript. The POST route handles steps 4-5.
        