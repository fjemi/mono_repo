ARG WORKDIR
# ARG TAG
ARG NODE_ENV


# App base image
FROM node:18 as base
# Set environment variables
ARG NODE_ENV
ENV NODE_ENV $NODE_ENV
ARG DEBUG
ENV DEBUG $DEBUG
ARG HOST
ENV HOST $HOST
ARG PORT
ENV PORT $PORT
ARG FAST_REFRESH
ENV FAST_REFRESH $FAST_REFRESH
# Set working directory and 
# copy files into it
WORKDIR $WORKDIR


# Build app dependencies
FROM base as build_dependencies
COPY package.json ./
COPY yarn.lock ./
RUN yarn install
# COPY . ./


# COPY tsconfig.json ./
# RUN yarn install
# COPY . ./



# Testing stage
FROM build_dependencies as test
RUN yarn test



# Build app for production app
FROM build_dependencies as build
RUN yarn
RUN yarn build


# # Intermediary stage
# # COPY --from=build ${WORKDIR}/build /usr/share/nginx/html
# # COPY --from=build ${WORKDIR}/nginx/nginx.conf /etc/nginx/conf.d/default.conf


# # Development stage

# # QA stage

# Production stage
FROM nginx as production
COPY --from=build ${WORKDIR}/build /usr/share/nginx/html
COPY --from=build ${WORKDIR}/nginx/nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE $PORT
CMD ["nginx", "-g", "daemon off;"]


# # Final Stage
# FROM $NODE_ENV as final

# # Build app container image
# # docker build -t ui_react_ts .
# # Start app container
# # docker run -dp 3000:3000 ui_react_ts

# # TODO: Add other stages
# # Testing
# # Linting
# # Sonarcude scan

